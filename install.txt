
#-----------------------------------------------------------------------------
# work with git and github
#-----------------------------------------------------------------------------

#to create fork in github
#using brouser to to github main project and use menu, give your github account name

#directory for the local repos
mkdir ~/git
cd ~/git

#to clone github repo
git clone https://github.com/vladn-ma/vladn-ovs-doc
git clone https://github.com/vladn-ma/ovs ovs.git

cd ovs.git

#to see remotes
git remote -v

#set remote origin for fork
git remote set-url origin https://github.com/vladn-ma/ovs

#set remote upstream for the fork
git remote add upstream https://github.com/openvswitch/ovs.git

#to sinc fork with with upstream (main remote repo)
git fetch upstream
git checkout master
git merge upstream/master

#or
git pull upstream
git push origin

#create development branch and verify it
git branch vland-dev
git branch
git checkout vladn-dev
git status

#-----------------------------------------------------------------------------
# OVS
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
#OVS build

#update and upgrade system
sudo apt-get update
sudo apt-get dist-upgrade

#install dependencies and tools
sudo apt-get install python-simplejson automake autoconf gcc uml-utilities libtool build-essential git pkg-config linux-headers-$(uname -r)

#bootstrapping
cd ovs.git
./boot.sh

#configure to bould ovs userspace and kernel modules
./configure --with-linux=/lib/modules/$(uname -r)/build

#make
make clean
make -j4
sudo make install

#chdck if build is successfull
make check TESTSUITEFLAGS=-j4

#remove modules
sudo modprobe -r openvswitch
#or
rmmod openvswitch

#install modules
sudo make modules_install
sudo modprobe openvswitch

#verify modules
lsmod | grep openvswitch

#-----------------------------------------------------------------------------
#OVS start

#init config database
sudo touch /usr/local/etc/ovs-vswitchd.conf
sudo mkdir -p /usr/local/etc/openvswitch
sudo ovsdb-tool create /usr/local/etc/openvswitch/conf.db vswitchd/vswitch.ovsschema
 
#start database server
sudo ovsdb-server \
--remote=punix:/usr/local/var/run/openvswitch/db.sock \
--remote=db:Open_vSwitch,Open_vSwitch,manager_options \
--pidfile \
--detach \
--log-file

#init database - just once
sudo ovs-vsctl --no-wait init

#start ovs demon
sudo ovs-vswitchd --pidfile --detach

#verify OVS modules
lsmod | grep br

#-----------------------------------------------------------------------------
#OVS configure

#find out available eth port
ifconfig

#add bridge and port
sudo ovs-vsctl add-br br0
sudo ovs-vsctl add-port br0 eth1
sudo ovs-vsctl add-port br0 br0p1 -- set interface br0p1 type=internal

#delete bridge and port
sudo ovs-vsctl del-br br0
sudo ovs-vsctl del-port br0 eth0

#Zero out your eth0 interface and slap it on the bridge interface
ifconfig eth0 0

#verify
ifconfig

#OVS get info
ps -ea | grep ovs
sudo ovs-vsctl show
sudo ovs-vsctl list-br
sudo ovs-vsctl list bridge
sudo ovs-vsctl list bridge br0
sudo ovs-vsctl list-ports br0
sudo ovs-vsctl list port
sudo ovs-vsctl list port eth0
sudo cat /usr/local/var/log/openvswitch/ovsdb-server.log

#OVS show linux rauting table
route -n

#OVS to dump all tables from db
sudo ovsdb-client dump
sudo ovsdb-client get-schema --pretty

#-----------------------------------------------------------------------------
#OVS - restart (after the build or reboot)
#-----------------------------------------------------------------------------
#load and verify kernel module
sudo modprobe openvswitch
lsmod | grep openvswitch

#start ovsdb server
sudo ovsdb-server \
--remote=punix:/usr/local/var/run/openvswitch/db.sock \
--remote=db:Open_vSwitch,Open_vSwitch,manager_options \
--pidfile \
--detach \
--log-file

#start ovs demon
sudo ovs-vswitchd --pidfile --detach

#verify OVS modules
lsmod | grep br


#-----------------------------------------------------------------------------
#OVS / OF config

sudo ovs-ofctl dump-tables br0
sudo ovs-ofctl dump-flows br0

#-----------------------------------------------------------------------------
# KVM
#-----------------------------------------------------------------------------

#install KVM
sudo apt-get install qemu-kvm libvirt-bin bridge-utils virt-manager
sudo adduser vladimir libvirtd

sudo mkdir /etc/openvswitch
sudo nano /etc/openvswitch/ovs-ifup

#insert in the file
#!/bin/sh
switch='br0'
/sbin/ifconfig $1 0.0.0.0 up
ovs-vsctl add-port ${switch} $1

sudo nano /etc/openvswitch/ovs-ifdown
#insert in the file

#!/bin/sh
switch='br0'
/sbin/ifconfig $1 0.0.0.0 down
ovs-vsctl del-port ${switch} $1

sudo chmod +x /etc/openvswitch/ovs-ifup /etc/openvswitch/ovs-ifdown

#create empty vm image file
qemu-img create -f qcow2 /home/vladimir/kvm_images/vm01.img 5G

#create virtual machine
sudo kvm -m 512 -net nic,macaddr=00:00:00:00:cc:10 -net tap,script=/etc/openvswitch/ovs-ifup,downscript=/etc/openvswitch/ovs-ifdown -cdrom /home/vladimir/Downloads/ubuntu-15.04-server-amd64.iso -drive file=/home/vladimir/kvm_images/vm01.img

#run virtual machine with image created in previous command
sudo kvm -m 512 -net nic,macaddr=00:00:00:00:cc:10 -net tap,script=/etc/openvswitch/ovs-ifup,downscript=/etc/openvswitch/ovs-ifdown -drive file=/home/vladimir/kvm_images/vm01.img

#run virtual machine with image created in vm-manager
sudo kvm -m 512 -net nic,macaddr=00:00:00:00:cc:10 -net tap,script=/etc/openvswitch/ovs-ifup,downscript=/etc/openvswitch/ovs-ifdown -drive file=/var/lib/libvirt/images/vn11.img

#run virtual machine with small linux image from qimu
sudo kvm -m 512 -net nic,macaddr=00:00:00:00:cc:10 -net tap,script=/etc/openvswitch/ovs-ifup,downscript=/etc/openvswitch/ovs-ifdown -drive file=/home/vladimir/kvm_images/linux-0.2.img

virsh -c qemu:///system list --all

#create vm using virt-install
sudo virt-install \
--connect qemu:///system --name vm02 --ram 1000 \
--disk path=/home/vladimir/kvm_images/vm02.img,size=8 --network network:default \
--cdrom /home/vladimir/Downloads/ubuntu-15.04-server-amd64.iso \
--os-type=linux

#create vm using vmbuilder
    vmbuilder kvm ubuntu \
    --suite=precise \
    --flavour=virtual \
    --arch=amd64 \
    --mirror=http://de.archive.ubuntu.com/ubuntu \
    -o \
    --libvirt=qemu:///system \
    --ip=192.168.0.101 \
    --gw=192.168.0.1 \
    --part=vmbuilder.partition \
    --templates=mytemplates \
    --user=administrator \
    --name=Administrator \
    --pass=howtoforge \
    --addpkg=vim-nox \
    --addpkg=unattended-upgrades \
    --addpkg=acpid \
    --firstboot=/var/lib/libvirt/images/vm1/boot.sh \
    --mem=256 \
    --hostname=vm1 \
    --bridge=br0

#config xml of the vm created with libvirt are in
ls /etc/libvirt/qemu
#images of the vm created with libvirt are in
ls /var/lib/libvirt/images

#-----------------------------------------------------------------------------











































