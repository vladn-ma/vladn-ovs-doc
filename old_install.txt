#after installation steps (USING UBUNTU)

# update and upgrade ubuntu 
	sudo apt-get update
	sudo apt-get dist-upgrade

#ubuntu version
	lsb_release -a

#install gedit
	sudo apt-get install gedit

#install git
	sudo apt-get install git
	git config --global user.name "vladn"
	git config --global user.email "vladn@broadcom.com"
	cd
	mkdir git
	cd git

#get install.txt
	git clone /media/vladn/097B-C82A/git/doc.git doc.git 

#optional: to add new repo:
	mkdir CumulusDoc
	cd CumulusDoc/
	git init
	git remote add origin  /media/vladn/097B-C82A/git/CumulusDoc
	git remote -v
	git config --global push.default simple
	git push --set-upstream origin master
	history >> install.txt
	git add .
	git commit -m "added install.txt"

#add root user and password
	sudo passwd root

#install ssh 
	sudo apt-get install openssh-server openssh-client
	sudo nano /etc/ssh/sshd_config
#change line 
	PermitRootLogin without-password
#into line
	PermitRootLogin yes
#restart ssh service
	sudo service ssh restart


#-----------------------------------------------------------------------------
#Linux kernel
#-----------------------------------------------------------------------------
#install needed tools
sudo apt-get install libncurses5-dev gcc make git exuberant-ctags

#get kernel repo from github
git clone git://git.kernel.org/pub/scm/linux/kernel/git/stable/linux-stable.git
cd linux-stable

#find the latest stable kernel
git tag -l | less

#alternatively get latest linux tree
 
cd linux

 
#-----------------------------------------------------------------------------
#KVM
#-----------------------------------------------------------------------------

#install KVM
	sudo apt-get install qemu-kvm
	sudo apt-get install qemu
	sudo apt-get install virt-manager
	sudo apt-get install libvirt-doc
	sudo apt-get install ubuntu-vm-builder

	#sudo apt-get install virt-viewer
	#sudo apt-get install libvirt-bin
	#sudo apt-get install python-vm-builder
	#sudo apt-get install bridge-utils

#username and root should be added to the groups: kvm and libvirtd. 
	sudo adduser `id -un` libvirtd
	sudo adduser `id -un` kvm
	groups

#to create virtual machine

	sudo virt-install -n vm01 -r 1000 --disk path=/var/lib/libvirt/images/vm01.img,bus=virtio,size=8 -c /home/vladn/Downloads/ubuntu-14.04.2-server-amd64.iso --network network=default,model=virtio 


#explanation of some arguments
#-n NN: the name of the new virtual machine will be vm01 in this example.
#-r NN: specifies the amount of memory the virtual machine will use in megabytes.
#--disk path=NN,size=NN: indicates the path to the virtual diskand size in GB.
#-c NN: file to be used as a virtual CDROM. 
#--network network=NN,model=NN: details related to the VM's network interface. 

#to start virsh shell
	virsh --connect=qemu:///system

#To list running virtual machines:
	virsh --connect qemu:///system list --all 

#to clone virtual machine
	sudo virt-clone --original vm01 --name vm02 --file /var/lib/libvirt/images/vm02.img

#to destroy virtual machine use one of 
	virsh -c qemu:///system destroy vm01
	virsh undefine vm01

#To start a virtual machine:
	virsh -c qemu:///system start vm01

#to start a virtual machine at boot:
	virsh -c qemu:///system autostart vm01

#to reboot a virtual machine :
	virsh -c qemu:///system reboot vm01

#to save virtual machine on disk
	virsh -c qemu:///system save vm01 vm01-1504201002.state

#to restore virtual machine from disk
	virsh -c qemu:///system restore vm01-1504201002.state

#To shutdown a virtual machine:
	virsh -c qemu:///system shutdown vm01

#to connect to the virtual machine's console by using:
	virt-viewer -c qemu:///system vm01

#to connect to a remote host using SSH with key authentication, as well:
	virt-viewer -c qemu+ssh://virtnode1.mydomain.com/system vm01

#to show virtual interfaces
	virsh net-list

#to create default interface use one of
	virsh net-start default
	virsh net-autostart default

#to disable virbr0, enter:
	virsh net-destroy default
	virsh net-undefine default
	service libvirtd restart
	ifconfig 

#in order to restore default network default.xml (backup is in doc.git) should be in /etc/libvirt/qemu/networks/

#-----------------------------------------------------------------------------
#OVS get, build and install from source pulled from hithub
#-----------------------------------------------------------------------------

#install dependencies
	sudo apt-get update
	sudo apt-get upgrade

	sudo apt-get install gcc 
	sudo apt-get install python-simplejson 
	sudo apt-get install automake 
	sudo apt-get install autoconf 
	sudo apt-get install uml-utilities 
	sudo apt-get install libtool 
	sudo apt-get install build-essential 
	sudo apt-get install pkg-config 
	sudo apt-get install linux-headers-`uname -r`
	sudo apt-get install graphviz
	sudo apt-get install valgrind

#clone repo
	git clone https://github.com/openvswitch/ovs.git ovs.git

#bootstrap
	./boot.sh

#configure makefiles if kernel module should be build too
	./configure --with-linux=/lib/modules/`uname -r`/build

#build
	make

#run tests
	make check TESTSUITEFLAGS=-j3

#for all commands below become a root
	sudo su

#install
	make install

#----------------------------------------
#install kernel modules
	make modules_install

#optional
	depmode
#or
	modprobe libcrc32c 
	modprobe gre

#remove old and install new
	modprobe -r openvswitch
	modprobe --first-time openvswitch

#to verify it is loaded, list of all loaded modules
	lsmod | grep open

#-----------------------------------------
#install kernel modules troubleshooting

#list all loadable kernel modules
	ls /lib/modules/$(uname -r)/kernel/drivers/

#if module cannot be loadec verify that kernel version for built module is the same as for the kernel
	modinfo  datapath/linux/openvswitch.ko | grep vermagic
	modinfo /lib/modules/`uname -r`/kernel/net/bridge/bridge.ko | grep vermagic

#remove or insert kernel module using low level command ( not recomended)
	rmmod datapath/linux/openvswitch.ko
	insmod datapath/linux/openvswitch.ko

#---------------------------------------------
#initialize the configuration database using ovsdb-tool, e.g.:
	mkdir -p /usr/local/etc/openvswitch
	ovsdb-tool create /usr/local/etc/openvswitch/conf.db vswitchd/vswitch.ovsschema

#start ovs service
	ovsdb-server /usr/local/etc/openvswitch/conf.db \
	--remote=punix:/usr/local/var/run/openvswitch/db.sock \
        --remote=db:Open_vSwitch,Open_vSwitch,manager_options \
        --private-key=db:Open_vSwitch,SSL,private_key \
        --certificate=db:Open_vSwitch,SSL,certificate \
        --bootstrap-ca-cert=db:Open_vSwitch,SSL,ca_cert \
        --pidfile --detach --log-file

	ovs-vsctl --no-wait init
	ovs-vswitchd --pidfile --detach

#get info / verify
	ovs-vsctl --help
	cat /usr/local/var/log/openvswitch/ovsdb-server.log
	ovs-vswitchd --version
	ovs-dpctl show
	ovs-vsctl show

#??
	lsmod | grep br
	service openvswitch-switch status
	/etc/init.d/openvswitch-switch status
	/etc/init.d/openvswitch-switch restart

#------------------------------------------------------------------------
#OVS use with KVM

#create files:
	/etc/ovs-ifup

#with script
#!/bin/sh
switch='br2'
/sbin/ifconfig $1 0.0.0.0 up
ovs-vsctl add-port ${switch} $1

#and
	/etc/ovs-ifdown

#with script
#!/bin/sh
switch='br2'
/sbin/ifconfig $1 0.0.0.0 down
ovs-vsctl del-port ${switch} $1

#make both files executable
	chmod +x /etc/ovs-ifup /etc/ovs-ifdown

#create OVS bridge
	ovs-vsctl add-br br2

#add port to the bridge
	ovs-vsctl add-port br2 eth0

#create vm image
	qemu-img create -f qcow2 /home/vladn/kvm_images/vm01.kvm 8G

#install os on vm image from scrom image
	sudo kvm -m 512 \
	-hda /home/vladn/kvm_images/vm01.kvm \
	-net nic,macaddr=00:11:22:EE:EE:EE \
	-net tap,script=/etc/ovs-ifup,downscript=/etc/ovs-ifdown \
	-cdrom /home/vladn/Downloads/ubuntu-14.04.2-server-amd64.iso

#start vm from vm image
	kvm -m 512 -hda /home/vladn/kvm_images/vm01.kvm -net nic,macaddr=00:11:22:CC:CC:C5 -net tap,script=/etc/ovs-ifup,downscript=/etc/ovs-ifdown

#verify
	ovs-dpctl show
	ovs-vsctl show
	ovs-ofctl show br2

#-----------------------------------------
          #ovs delete port
	sudo ovs-vsctl del-port br2 tap0

#ovs delete bridge with all ports on it
	sudo ovs-vsctl del-br br2

#------------------------------------------







