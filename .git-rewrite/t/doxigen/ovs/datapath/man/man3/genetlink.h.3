.TH "/home/vladn/git/ovs/datapath/linux/compat/include/net/genetlink.h" 3 "Mon Aug 17 2015" "ovs datapath" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/vladn/git/ovs/datapath/linux/compat/include/net/genetlink.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <linux/version\&.h>\fP
.br
\fC#include <linux/netlink\&.h>\fP
.br
\fC#include <net/net_namespace\&.h>\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBrpl_genl_family\fP"
.br
.in -1c
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBgenl_family\fP   \fBrpl_genl_family\fP"
.br
.ti -1c
.RI "#define \fBgenl_notify\fP   \fBrpl_genl_notify\fP"
.br
.ti -1c
.RI "#define \fBgenlmsg_put\fP   \fBrpl_genlmsg_put\fP"
.br
.ti -1c
.RI "#define \fBgenl_unregister_family\fP   \fBrpl_genl_unregister_family\fP"
.br
.ti -1c
.RI "#define \fBgenl_set_err\fP   rpl_genl_set_err"
.br
.ti -1c
.RI "#define \fBgenlmsg_multicast_netns\fP   rpl_genlmsg_multicast_netns"
.br
.ti -1c
.RI "#define \fB__genl_register_family\fP   \fBrpl___genl_register_family\fP"
.br
.ti -1c
.RI "#define \fBgenl_register_family\fP   \fBrpl_genl_register_family\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBrpl_genl_notify\fP (struct \fBgenl_family\fP *family, struct sk_buff *skb, struct net *net, u32 portid, u32 group, struct nlmsghdr *nlh, gfp_t \fBflags\fP)"
.br
.ti -1c
.RI "static void * \fBrpl_genlmsg_put\fP (struct sk_buff *skb, u32 portid, u32 seq, struct \fBgenl_family\fP *family, int \fBflags\fP, u8 cmd)"
.br
.ti -1c
.RI "static int \fBrpl_genl_unregister_family\fP (struct \fBgenl_family\fP *family)"
.br
.ti -1c
.RI "static int \fBgenl_set_err\fP (struct \fBgenl_family\fP *family, struct net *net, u32 portid, u32 group, int code)"
.br
.ti -1c
.RI "static int \fBgenlmsg_multicast_netns\fP (struct \fBgenl_family\fP *family, struct net *net, struct sk_buff *skb, u32 portid, unsigned int group, gfp_t \fBflags\fP)"
.br
.ti -1c
.RI "int \fBrpl___genl_register_family\fP (struct \fBgenl_family\fP *family)"
.br
.ti -1c
.RI "static int \fBrpl_genl_register_family\fP (struct \fBgenl_family\fP *family)"
.br
.ti -1c
.RI "static struct sk_buff * \fBgenlmsg_new_unicast\fP (size_t payload, struct genl_info *info, gfp_t \fBflags\fP)"
.br
.ti -1c
.RI "static int \fBgenl_has_listeners\fP (struct \fBgenl_family\fP *family, struct net *net, unsigned int group)"
.br
.ti -1c
.RI "static int \fBgenlmsg_parse\fP (const struct nlmsghdr *nlh, const struct \fBgenl_family\fP *family, struct nlattr *tb[], int maxtype, const struct nla_policy *policy)"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define __genl_register_family   \fBrpl___genl_register_family\fP"

.SS "#define genl_family   \fBrpl_genl_family\fP"

.SS "#define genl_notify   \fBrpl_genl_notify\fP"

.SS "#define genl_register_family   \fBrpl_genl_register_family\fP"

.SS "#define genl_set_err   rpl_genl_set_err"

.SS "#define genl_unregister_family   \fBrpl_genl_unregister_family\fP"

.SS "#define genlmsg_multicast_netns   rpl_genlmsg_multicast_netns"

.SS "#define genlmsg_put   \fBrpl_genlmsg_put\fP"

.SH "Function Documentation"
.PP 
.SS "static int genl_has_listeners (struct \fBgenl_family\fP * family, struct net * net, unsigned int group)\fC [inline]\fP, \fC [static]\fP"

.PP
.nf
111 {
112 #ifdef HAVE_MCGRP_OFFSET
113     if (WARN_ON_ONCE(group >= family->n_mcgrps))
114         return -EINVAL;
115     group = family->mcgrp_offset + group;
116 #endif
117     return netlink_has_listeners(net->genl_sock, group);
118 }
.fi
.SS "static int genl_set_err (struct \fBgenl_family\fP * family, struct net * net, u32 portid, u32 group, int code)\fC [inline]\fP, \fC [static]\fP"

.PP
.nf
69 {
70 #if LINUX_VERSION_CODE < KERNEL_VERSION(2,6,33)
71     netlink_set_err(net->genl_sock, portid, group, code);
72     return 0;
73 #else
74     return netlink_set_err(net->genl_sock, portid, group, code);
75 #endif
76 }
.fi
.SS "static int genlmsg_multicast_netns (struct \fBgenl_family\fP * family, struct net * net, struct sk_buff * skb, u32 portid, unsigned int group, gfp_t flags)\fC [inline]\fP, \fC [static]\fP"

.PP
.nf
82 {
83     return nlmsg_multicast(net->genl_sock, skb, portid, group, flags);
84 }
.fi
.SS "static struct sk_buff* genlmsg_new_unicast (size_t payload, struct genl_info * info, gfp_t flags)\fC [static]\fP"

.PP
.nf
103 {
104     return genlmsg_new(payload, flags);
105 }
.fi
.SS "static int genlmsg_parse (const struct nlmsghdr * nlh, const struct \fBgenl_family\fP * family, struct nlattr * tb[], int maxtype, const struct nla_policy * policy)\fC [inline]\fP, \fC [static]\fP"

.PP
.nf
142 {
143     return nlmsg_parse(nlh, family->hdrsize + GENL_HDRLEN, tb, maxtype,
144                policy);
145 }
.fi
.SS "int rpl___genl_register_family (struct \fBgenl_family\fP * family)"

.SS "void rpl_genl_notify (struct \fBgenl_family\fP * family, struct sk_buff * skb, struct net * net, u32 portid, u32 group, struct nlmsghdr * nlh, gfp_t flags)"

.SS "static int rpl_genl_register_family (struct \fBgenl_family\fP * family)\fC [inline]\fP, \fC [static]\fP"

.PP
.nf
92 {
93     family->module = THIS_MODULE;
94     return rpl___genl_register_family(family);
95 }
.fi
.SS "static int rpl_genl_unregister_family (struct \fBgenl_family\fP * family)\fC [inline]\fP, \fC [static]\fP"

.PP
.nf
61 {
62     return genl_unregister_family(&family->compat_family);
63 }
.fi
.SS "static void* rpl_genlmsg_put (struct sk_buff * skb, u32 portid, u32 seq, struct \fBgenl_family\fP * family, int flags, u8 cmd)\fC [inline]\fP, \fC [static]\fP"

.PP
.nf
54 {
55     return genlmsg_put(skb, portid, seq, &family->compat_family, flags, cmd);
56 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for ovs datapath from the source code\&.
