.TH "/home/vladn/git/ovs/datapath/vport-netdev.h" 3 "Mon Aug 17 2015" "ovs datapath" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/vladn/git/ovs/datapath/vport-netdev.h \- 
.SH SYNOPSIS
.br
.PP
\fC#include <linux/netdevice\&.h>\fP
.br
\fC#include <linux/rcupdate\&.h>\fP
.br
\fC#include 'vport\&.h'\fP
.br

.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBnetdev_vport\fP"
.br
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "struct \fBvport\fP * \fBovs_netdev_get_vport\fP (struct net_device *dev)"
.br
.ti -1c
.RI "static struct \fBnetdev_vport\fP * \fBnetdev_vport_priv\fP (const struct \fBvport\fP *\fBvport\fP)"
.br
.ti -1c
.RI "const char * \fBovs_netdev_get_name\fP (const struct \fBvport\fP *)"
.br
.ti -1c
.RI "void \fBovs_netdev_detach_dev\fP (struct \fBvport\fP *)"
.br
.ti -1c
.RI "int __init \fBovs_netdev_init\fP (void)"
.br
.ti -1c
.RI "void \fBovs_netdev_exit\fP (void)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "static struct \fBnetdev_vport\fP* netdev_vport_priv (const struct \fBvport\fP * vport)\fC [static]\fP"

.PP
.nf
37 {
38     return vport_priv(vport);
39 }
.fi
.SS "void ovs_netdev_detach_dev (struct \fBvport\fP *)"

.PP
.nf
165 {
166     struct netdev_vport *netdev_vport = netdev_vport_priv(vport);
167 
168     ASSERT_RTNL();
169     netdev_vport->dev->priv_flags &= ~IFF_OVS_DATAPATH;
170     netdev_rx_handler_unregister(netdev_vport->dev);
171     netdev_upper_dev_unlink(netdev_vport->dev,
172                 netdev_master_upper_dev_get(netdev_vport->dev));
173     dev_set_promiscuity(netdev_vport->dev, -1);
174 }
.fi
.SS "void ovs_netdev_exit (void)"

.PP
.nf
292 {
293     ovs_vport_ops_unregister(&ovs_netdev_vport_ops);
294 }
.fi
.SS "const char* ovs_netdev_get_name (const struct \fBvport\fP *)"

.PP
.nf
189 {
190     const struct netdev_vport *netdev_vport = netdev_vport_priv(vport);
191     return netdev_vport->dev->name;
192 }
.fi
.SS "struct \fBvport\fP* ovs_netdev_get_vport (struct net_device * dev)"

.PP
.nf
258 {
259 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,36) || \
260     defined HAVE_RHEL_OVS_HOOK
261 #ifdef HAVE_OVS_DATAPATH
262     if (likely(dev->priv_flags & IFF_OVS_DATAPATH))
263 #else
264     if (likely(rcu_access_pointer(dev->rx_handler) == netdev_frame_hook))
265 #endif
266 #ifdef HAVE_RHEL_OVS_HOOK
267         return (struct vport *)rcu_dereference_rtnl(dev->ax25_ptr);
268 #else
269         return (struct vport *)rcu_dereference_rtnl(dev->rx_handler_data);
270 #endif
271     else
272         return NULL;
273 #else
274     return (struct vport *)rcu_dereference_rtnl(dev->br_port);
275 #endif
276 }
.fi
.SS "int __init ovs_netdev_init (void)"

.PP
.nf
287 {
288     return ovs_vport_ops_register(&ovs_netdev_vport_ops);
289 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for ovs datapath from the source code\&.
