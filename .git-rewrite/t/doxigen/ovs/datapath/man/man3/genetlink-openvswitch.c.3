.TH "/home/vladn/git/ovs/datapath/linux/genetlink-openvswitch.c" 3 "Mon Aug 17 2015" "ovs datapath" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/vladn/git/ovs/datapath/linux/genetlink-openvswitch.c \- 
.SH SYNOPSIS
.br
.PP
\fC#include <net/genetlink\&.h>\fP
.br
\fC#include <linux/version\&.h>\fP
.br

.SS "Functions"

.in +1c
.ti -1c
.RI "void \fBrpl_genl_notify\fP (struct \fBrpl_genl_family\fP *family, struct sk_buff *skb, struct net *net, u32 portid, u32 group, struct nlmsghdr *nlh, gfp_t \fBflags\fP)"
.br
.ti -1c
.RI "\fBEXPORT_SYMBOL_GPL\fP (\fBrpl_genl_notify\fP)"
.br
.ti -1c
.RI "int \fBrpl___genl_register_family\fP (struct \fBrpl_genl_family\fP *f)"
.br
.ti -1c
.RI "\fBEXPORT_SYMBOL_GPL\fP (\fBrpl___genl_register_family\fP)"
.br
.in -1c
.SH "Function Documentation"
.PP 
.SS "EXPORT_SYMBOL_GPL (\fBrpl_genl_notify\fP)"

.SS "EXPORT_SYMBOL_GPL (\fBrpl___genl_register_family\fP)"

.SS "int rpl___genl_register_family (struct \fBrpl_genl_family\fP * f)"

.PP
.nf
27 {
28     int err;
29 
30     f->compat_family\&.id = f->id;
31     f->compat_family\&.hdrsize = f->hdrsize;
32     strncpy(f->compat_family\&.name, f->name, GENL_NAMSIZ);
33     f->compat_family\&.version = f->version;
34     f->compat_family\&.maxattr = f->maxattr;
35     f->compat_family\&.netnsok = f->netnsok;
36 #ifdef HAVE_PARALLEL_OPS
37     f->compat_family\&.parallel_ops = f->parallel_ops;
38 #endif
39     err = genl_register_family_with_ops(&f->compat_family,
40                         (struct genl_ops *) f->ops, f->n_ops);
41     if (err)
42         goto error;
43 
44     if (f->mcgrps) {
45         /* Need to Fix GROUP_ID() for more than one group\&. */
46         BUG_ON(f->n_mcgrps > 1);
47         err = genl_register_mc_group(&f->compat_family,
48                          (struct genl_multicast_group *) f->mcgrps);
49         if (err)
50             goto error;
51     }
52 error:
53     return err;
54 
55 }
.fi
.SS "void rpl_genl_notify (struct \fBrpl_genl_family\fP * family, struct sk_buff * skb, struct net * net, u32 portid, u32 group, struct nlmsghdr * nlh, gfp_t flags)"

.PP
.nf
11 {
12 #if LINUX_VERSION_CODE < KERNEL_VERSION(3,3,0)
13     struct sock *sk = net->genl_sock;
14     int report = 0;
15 
16     if (nlh)
17         report = nlmsg_report(nlh);
18 
19     nlmsg_notify(sk, skb, portid, group, report, flags);
20 #else
21     genl_notify(skb, net, portid, group, nlh, flags);
22 #endif
23 }
.fi
.SH "Author"
.PP 
Generated automatically by Doxygen for ovs datapath from the source code\&.
