.TH "/home/vladn/git/ovs/datapath/linux/compat/include/linux/rtnetlink.h" 3 "Mon Aug 17 2015" "ovs datapath" \" -*- nroff -*-
.ad l
.nh
.SH NAME
/home/vladn/git/ovs/datapath/linux/compat/include/linux/rtnetlink.h \- 
.SH SYNOPSIS
.br
.PP
.SS "Macros"

.in +1c
.ti -1c
.RI "#define \fBrcu_dereference_rtnl\fP(p)"
.br
.ti -1c
.RI "#define \fBrtnl_dereference\fP(p)   \fBrcu_dereference_protected\fP(p, lockdep_rtnl_is_held())"
.br
.in -1c
.SH "Macro Definition Documentation"
.PP 
.SS "#define rcu_dereference_rtnl(p)"
\fBValue:\fP
.PP
.nf
rcu_dereference_check(p, rcu_read_lock_held() ||   \
                 lockdep_rtnl_is_held())
.fi
rcu_dereference_rtnl - rcu_dereference with debug checking \fC\fP: The pointer to read, prior to dereferencing
.PP
Do an rcu_dereference(p), but check caller either holds rcu_read_lock() or RTNL\&. Note : Please prefer \fBrtnl_dereference()\fP or rcu_dereference() 
.SS "#define rtnl_dereference(p)   \fBrcu_dereference_protected\fP(p, lockdep_rtnl_is_held())"
rtnl_dereference - fetch RCU pointer when updates are prevented by RTNL \fC\fP: The pointer to read, prior to dereferencing
.PP
Return the value of the specified RCU-protected pointer, but omit both the smp_read_barrier_depends() and the ACCESS_ONCE(), because caller holds RTNL\&. 
.SH "Author"
.PP 
Generated automatically by Doxygen for ovs datapath from the source code\&.
