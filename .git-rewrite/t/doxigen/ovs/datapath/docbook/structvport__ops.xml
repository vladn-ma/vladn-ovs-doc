<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="structvport__ops">
<title>vport_ops struct Reference</title>
<para>
    <programlisting>#include <link linkend="vport_8h">&lt;vport.h&gt;</link></programlisting>
</para>
<para>Inheritance diagram for vport_ops</para>
<para>
    <figure>
        <title>Inheritance graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="structvport__ops__inherit__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
<para>Collaboration diagram for vport_ops</para>
<para>
    <figure>
        <title>Collaboration graph</title>
        <mediaobject>
            <imageobject>
                <imagedata width="50%" align="center" valign="middle" scalefit="1" fileref="structvport__ops__coll__graph.png"></imagedata>
            </imageobject>
        </mediaobject>
    </figure>
</para>
        <section>
            <title>Data Fields</title>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>enum ovs_vport_type type</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct vport *(* create)(const struct vport_parms *)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>void(* destroy)(struct vport *)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int(* set_options)(struct vport *, struct nlattr *)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int(* get_options)(const struct vport *, struct sk_buff *)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>const char *(* get_name)(const struct vport *)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int(* send)(struct vport *, struct sk_buff *)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>int(* get_egress_tun_info)(struct vport *, struct sk_buff *, struct ovs_tunnel_info *)</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct module * owner</para>
                    </listitem>
                </itemizedlist>
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <para>struct list_head list</para>
                    </listitem>
                </itemizedlist>
            </para>
        </section>
        <simplesect>
            <title>Detailed Description</title>

<para>struct <link linkend="structvport__ops">vport_ops</link> - definition of a type of virtual port</para>

<para>: OVS_VPORT_TYPE_* value for this type of virtual port. : Create a new vport configured as specified. On success returns a new vport allocated with <link linkend="linux_2vport_8c_1a9198ee06111592d2cf6c3b2bf94561c1">ovs_vport_alloc()</link>, otherwise an ERR_PTR() value. : Destroys a vport. Must call vport_free() on the vport but not before an RCU grace period has elapsed. : Modify the configuration of an existing vport. May be NULL if modification is not supported. : Appends vport-specific attributes for the configuration of an existing vport to a &amp;struct sk_buff. May be NULL for a vport that does not have any configuration. : Get the device&apos;s name. : Send a packet on the device. Returns the length of the packet sent, zero for dropped packets or negative for error. : Get the egress tunnel 5-tuple and other info for a packet. </para>
                <para>Definition at line 162 of file vport.h</para>
                <para>The Documentation for this struct was generated from the following file: </para>
                <para><itemizedlist><listitem><para>vport.h</para></listitem></itemizedlist></para>
        </simplesect>
        <section>
            <title>Field Documentation</title>
        </section>
</section>
