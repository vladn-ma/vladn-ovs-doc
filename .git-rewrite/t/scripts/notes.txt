###########################################################################
############### comments and cmd line commands fragments ##################
###########################################################################
vn-1003041655

Creating build directory /projects/sbx-sdk_ext1/work/vladn/views/sdk.latest/sdk/build/unix-linux-64/src/soc/sbx/qe2k/
(/bin/mkdir -p /projects/sbx-sdk_ext1/work/vladn/views/sdk.latest/sdk/build/unix-linux-64/src/soc/sbx/qe2k/; /bin/touch /projects/sbx-sdk_ext1/work/vladn/views/sdk.latest/sdk/build/unix-linux-64/src/soc/sbx/qe2k/.tree)
/bin/mv: overwrite `sbZfKaQsLnNextPriEntry.c', overriding mode 0444? 
/bin/mv: overwrite `sbZfKaQsLnaNextPriEntryConsole.c', overriding mode 0444?
/bin/mv: overwrite `sbZfKaQsLnaPriEntry.c', overriding mode 0444?
/bin/mv: overwrite `sbZfKaQsLnaPriEntryConsole.c', overriding mode 0444? 



#===============================================================================
# how to include new simulator header and lib
#==============================================================================
files used:
$SYSTEM_SIM/verify/caladan2/model/include/ZMBC2Lr.h
$SYSTEM_SIM/verify/caladan2/model/src/ZMBC2Lr.cpp

change release directory for the fe2k-tools in the file:
$SYSTEM_SIM/lcmodel/Makefile

export CA_LRPTOOLS_CMOD = fe2k-tools/1.236

add to the file:
$SYSTEM_SIM/verify/caladan2/model/include/ZMBC2Lr.h
#include <vnlrpint.hpp>
full paths:
#include </tools/sbx/fe2k-tools/1.235/linux.x86_64/2.2/include/bits.hpp>
#include </tools/sbx/fe2k-tools/1.235/linux.x86_64/2.2/include/vnlrpint.hpp>

class CZMBC2Lr
VnLrpInt m_vnLrpInt;

add new functionality to the file:
$SYSTEM_SIM/verify/caladan2/model/src/ZMBC2Lr.cpp

Makefiles to change when add lib:
$SYSTEM_SIM/lcmodel/Makefile
$SYSTEM_SIM/lcmodel/bcmsim/caladan2/Makefile

#===========================================================================
# how to run coverity in the sdk
#===========================================================================
copy $SDK/make/Make.local.template $SDK/make/Make.local

#add to the Make.local following:
 
#CFGFLAGS += -DSAL_FREE_NULL_IGNORE 
 FEATURE_LIST = L3 BCMX BCMX_DIAG EDITLINE TCL CUSTOMER TEST CHASSIS I2C 
 SBX_CHIPS=1 
 BCM_PTL_SPT = 1 
 BCM_FE2000_A0 = 1 
 BCM_QE2000_A0 = 1 
 BCM_BM9600_A0 = 1 
 BCM_BME3200_B0 = 1 
 BCM_88230_A0 = 1 
 VENDOR_LIST = BROADCOM 

#remove TCL from the featuries list

cd $SDK
cvmake

#===========================================================================



#===========================================================================
# unit tests
# directory:  $SDK/src/soc/sbx/fe2k-ucode/g2p3/src 
#===========================================================================
#file			source
#
#g2p3_unit.tcl		-
#g2p3_unit_ingress.tcl	-
#g2hg_unit_egress.tcl	-
#g2hg_unit_ingress.tcl	-
#g2p2_unit_egress.tcl	-
#g2p2_unit.tcl		-
#g2p2_unit_ingress.tcl	-
#g2p3_unit_egress.tcl	-
#
#testSbxUnit.tcl		
#			# This sources the test infrastructure.
#			# No tests are loaded just the test harness.
#			source $regress_tcl_path/pkg/tgt/NTestSuite.tcl
#			source $regress_tcl_path/pkg/tgt/TgtUtils.tcl
#			source $regress_tcl_path/pkg/tgt/ResetOnFail.tcl
#			source $regress_tcl_path/pkg/tgt/NTestCtrlTgt.tcl
#			source $regress_tcl_path/pkg/ase/ase_perf.tcl
#			source $regress_tcl_path/pkg/load.tcl
#
#			# Source common SBX TCL code.
#			source $utils_tcl_path/sbx_pkt.tcl
#			source $utils_tcl_path/gu2_utils.tcl
#
#			# Source SBX tests.
#			if [gu2_is_p3 $::unit_test_fe] {
#			   puts "Sourcing G2P3 Unit Regression"
#			   source $::gu2_tcl_path/g2p3_unit.tcl
#			   source $::gu2_tcl_path/g2p3_unit_ingress.tcl
#			   source $::gu2_tcl_path/g2p3_unit_egress.tcl
#			}
#
#testg2hgSbxUnit.tcl
#			# This sources the test infrastructure.
#			# No tests are loaded just the test harness.
#			source $regress_tcl_path/tcl/cmdlib.tcl
#			source $regress_tcl_path/pkg/load.tcl
#
#			# Source common SBX TCL code.
#			source $utils_tcl_path/sbx_pkt.tcl
#			source $utils_tcl_path/gu2_utils.tcl
			


#===========================================================================
# bcmsim crash on start up fix
# function $SDK/src/soc/sbx/fe2kxt/sbFe2000XtInit.c:
# void sbFe2000XtStartBubbleTimer(uint32_t unit, uint32_t startBubble, uint32_t size)
# fix: following fragment is inserted:
#  /* vn-0909101655 cmodel has bug in the bubble gen implementation 
#     and to fix crash of the bcmsim on start up we bail out of this function*/
#  /* vn-0909101655+*/ if (SAL_BOOT_BCMSIM) {
#  /* vn-0909101655+*/   SOC_DEBUG_PRINT((DK_VERBOSE, "Skipping %s for sbx bcmsim initialization\n", FUNCTION_NAME()));
#  /* vn-0909101655+*/   return;
#  /* vn-0909101655+*/ }

#===========================================================================
# bcmsim crash on cstore  fix
# fix: there was a bug in the
# file:
# $SYSTEM_SIM/verify/caladan2/model/src/ZMBC2Lr.cpp
# function:  
# CZMBCaLr::LrMemoryPortWrite
# line aprox 1353
# 
# fragment:
#     case FE2K_PORT_P2:
#       {
#          if( ZMBC2LR_OAM_COUNTER_ADDR_MASK & uAddr) {
# 	  ...
# 	  ...
# 	  ...
#          } else {
# 	   return m_pMmHandler->Write32(C2_MM_CLIENT_LRP,C2_MM_CLIENT_LRP_PORT2,uAddr,uValue32);
#          }
#       }
#       break;
# 
# Write32 was without else and therefore was called always even for the coherent counter processor;
# I fixed it as it is in the fragment above with adding else clause for this function call

#===========================================================================
# bcmsim crash on start up in function
# $SYSTEM_SIM/verify/caladan2/model/src/ZMBC2Pc.cpp: 
# CZMBC2Pc::MemWriteBuffer (this=0xbe4dae8, uAddr=0, pBuf=0x42685544 "", nLength=140, bBigEndian=0)
# # fix:
#     /*vn-0909210830 fix for the crash on the bcmsim start up
#       since fifo implementaiton in the lcmodel is not finished,
#       and PC_RXBUF_FIFO_DEBUG mode is not implemented
#       we have to bail out of this funciton to prevent crash */
#     /*vn-0909210830+*/ if (SAL_BOOT_BCMSIM) {
#     /*vn-0909210830+*/     return(rv);
#     /*vn-0909210830+*/     SOC_DEBUG_PRINT((DK_VERBOSE, "Skipping %s for sbx bcmsim initialization\n", FUNCTION_NAME()));
#     /*vn-0909210830+*/ }

#===========================================================================
# bcmsim# error message without crash: analligned port address

# fix: $SDK/src/soc/sbx/fe2kxt/sbFe2000XtInit.c
#  /* vn-0909210817 fix of the error message "sal-non aligned address"
#     seems port address calculated wrong and it can not be aligned
#     because of that wrong calculation. For the error message fix
#     correct calculated required as described below:
#     line from the original code replaced*/
# 
# replace: 
#               bp_reg_offset = SAND_HAL_REG_OFFSET(C2, PT_BP_CONFIG0);
# !             bp_reg_offset += qc.m_uFlowControlPort;
#               bp_reg = SAND_HAL_READ_OFFS(userDeviceHandle, bp_reg_offset);
# with
#               bp_reg_offset = SAND_HAL_REG_OFFSET(C2, PT_BP_CONFIG0);
# ! 	    /*            bp_reg_offset += qc.m_uFlowControlPort; */
# !             bp_reg_offset += (qc.m_uFlowControlPort%4)<<2;
#               bp_reg = SAND_HAL_READ_OFFS(userDeviceHandle, bp_reg_offset);
#  
#===========================================================================
# vn-1001111519  bcmsim start up crash:
# funciton fe2000.c:1694
#        rv = soc_sbx_g2p3_ilib_init(unit);
#===========================================================================
# bcmsim and lcmodel source files
#===========================================================================
# function in the sdk which calls cos_cbx_fe2000xt_init
# file:
#lc $SDK/src/soc/sbx/fe2000.c
# function: soc_sbx_fe2000xt_init at line 1648

# function soc_sbx_fe2000xt_init (unit=1, cfg=0x5151e010)
ls $SDK/src/soc/sbx/fe2kxt/fe2000.c:1648

# funciton which suppose to init queues
# file:
ls $SDK/src/soc/sbx/fe2kxt/sbFe2000XtInit.c:5838
    # function: sbFe2000XtInitQueues (userDeviceHandle=0x1, queues=0x5154b08c)

# message may be generated in the file:
ls $SYSTEM_SIM/lcmodel/bcmsim/common/lcm_bde.c
    # function: lcm_getreg_service
    # function: lcm_setreg_service
#other canditates are:
ls $SDK/systems/sim/pcid/pli.c
ls $SDK/systems/sim/pcid/pli.h

# one macros used in function sbFe2000XtInitQueues
ls $SYSTEM_SIM/shared_hibeam2/trex_auto/include/hal_common.h
#define SAND_HAL_REG_OFFSET(device,reg) (SAND_HAL_##device##_##reg##_OFFSET)

# file with the call of bubble generator
# this file also call functin which finally writes registers with 0 values for the receive buffers
ls $SDK/src/soc/sbx/fe2kxt/sbFe2000XtInit.c

# file which calls lrp simulator
ls $SYSTEM_SIM/verify/caladan2/model/src/ZMBC2Lr.cpp
    # function  called fe2k_lrp_step : line 910

# header file with class CZMBC2Lr
ls $SYSTEM_SIM/verify/caladan2/model/include
    # data member   fe2k_lrp_p_t m_pLrpPeSimulator; : line 172

# bcmsim main function
ls $SYSTEM_SIM/lcmodel/bcmsim/common/main.c

# bcmsim  bcmsim_lcm_init function
ls $SYSTEM_SIM/lcmodel/bcmsim/caladan2/lcm_if.cpp

# LCMODEL memory write function
ls $SYSTEM_SIM/verify/caladan2/model/src/ZMBC2Mm.cpp
    # CZMBC2Mm::Write32Lr (this=0xc6a6fa0, uPortId=2, uAddr=8388608, uValue=1) at line 769

# LCMODEL internal memory write funciton
ls $SYSTEM_SIM/verify/caladan2/model/src/ZMBC2Mm.cpp
    # CZMBC2Mm::Write32InternalMemory (this=0xc6a6fa0, uMmInstance=0, uMemoryInstance=0, uAddress=8388608, uValue=1)
    # at line :1642

# LCMODEL function which receives writes to the chip registers and therefore controlls initializaiton
ls $SYSTEM_SIM/verify/caladan2/model/src/ZMBC2Pc.cpp
    # CZMBC2Pc::RegisterWrite at line 591

# make file which add to LCMODEL simulator lib:
cd $SYSTEM_SIM
> find . -iname '*.hpp' -o -iname '*.cpp' -o -iname '*.h' -o -iname '*.c' -o -iname 'Makefile'| xargs grep 'libfe2k_lrp_sim' /dev/null
./lcmodel/bcmsim/caladan2/Makefile:	$(LCMODEL_LIB)/libfe2k_lrp_sim.a
./sw3/libdev/Makefile:	$(LCMODEL_LIB)/libfe2k_lrp_sim.a\

#===========================================================================
# libasm2int files
#===========================================================================

ls $SDK/src/soc/sbx/fe2k_common/fe2k-asm2-intd.c
ls $SDK/src/soc/sbx/fe2k_common/fe2k-asm2-md5.c
ls $SDK/src/soc/sbx/fe2k_common/fe2k-asm2-ncae.c

#===========================================================================
#perl tools
#===========================================================================

#utg.pl----------------------------
#location
ls $SDK/src/soc/sbx/fe2k-ucode/tools/utg.pl

#input file
ls $SDK/src/soc/sbx/fe2k-ucode/g2p3/src/g2p3.tables

#output files
ls $SDK/src/soc/sbx/fe2k-ucode/g2p3/src/c2_g2p3_other_defs.lrp2  
ls $SDK/src/soc/sbx/fe2k-ucode/g2p3/src/g2p3_defs.lrp2
ls $SDK/src/soc/sbx/fe2k-ucode/g2p3/src/g2p3_cint_data.c
ls $SDK/src/soc/sbx/fe2k-ucode/g2p3/src/g2p3__memmap.txt
ls $SDK/include/soc/sbx/g2p3/g2p3_defs.h
ls $SDK/src/soc/sbx/g2p3/g2p3_defs.c

# some statistic for the utg.pl generated files
# source files *.c *.h *.cpp *.hpp :
#  number of entries is:
# file:     3
# line:     111972
# class:    70
# struct:   542
# enum:     23
# typedef:  166
# extern:   1737
# static:   257
# _ext:     469

#streamcsv.pl----------------------------
#location
ls $SDK/src/soc/sbx/fe2k-ucode/tools/streamcsv.pl

#input file
#all lrp2 files?

#output file
ls $SDK/src/soc/sbx/fe2k-ucode/g2p3/src/g2p3_streams.csv

#===========================================================================
# changes in lcmodel make files
#===========================================================================

#add into verify/caladan2/Makefile
OTHER_TEST_INCLUDE_DIRS += $(FE2K_TOOLS)/src/libvnsim $(FE2K_TOOLS)/src/libcpptk

#add to lcmodel/Makefile
MORE_TEST_CPPFLAGS += -I${FE2K_TOOLS}/src/libvnsim -I$(FE2K_TOOLS)/src/libcpptk

#add to bcmsim/caladan2/Makefile
COMMON_HDIR += -I${FE2K_TOOLS}/src/libvnsim -I$(FE2K_TOOLS)/src/libcpptk

#add to the /shared_hibeam/make/Verif_Makefile
TEST_INCLUDE_DIRS += ${FE2K_TOOLS}/src/libvnsim $(FE2K_TOOLS)/src/libcpptk

#===========================================================================
# library testing commands
#===========================================================================
nm library_name
ld library_name

#===========================================================================
# search and replace commands
#===========================================================================
find ~/views/sdk.latest/system_sim/ -iname '*makefile*' | xargs grep '\-m32' /dev/null
~/scripts/muse '*Makefile*' "s/\-m32/M32_BUILD_CMD/g"
find ~/views/sdk.latest/system_sim/ -iname '*makefile*' | xargs grep 'M32_BUILD_CMD' /dev/null


# end of file

#=========================================================
# tcl script to build packets for the tests
#=========================================================
regress/bcm/pkg/sbx/utils/sbx_pkt.tcl
