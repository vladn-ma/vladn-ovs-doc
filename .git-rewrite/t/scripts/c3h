#! /bin/bash

#------------------------------------------------------------------
# definitions of functions
# print to stdout given command and then run it
function run_cmd
{
    echo "cmd: $1"
    if [ $DO_NOT_RUN_CMD ]; then
	echo "debug mode (no run)"
    else
        $1
    fi
}

# set constants
function set_constants
{
    echo "setting constants"
    mkdir -p sdk.$BUILD
    cd sdk.$BUILD
    BUILDDIR=`pwd`
    export SDK=$BUILDDIR/sdk
    export CALADAN3_TOOLS_PATH=$BUILDDIR/caladan_tools/java_tools
    UCODE_PATH=$SDK/caladan_ucode/g3p1/src
    REGRESSION_PATH=$CALADAN3_TOOLS_PATH/test/com/broadcom/mde/regression/c3_tests
    CFG_PATH=$CALADAN3_TOOLS_PATH/src/com/broadcom/mde/c3simenv/config
    CVSROOT_ATHENA=:pserver:$USER@cvsps-sj1-1.sj.broadcom.com:/projects/ntsw-cvs/swcvs/athena
    CVSROOT_MINERVA=:pserver:$USER@cvsps-sj1-1.sj.broadcom.com:/projects/ntsw-cvs2/swcvs4/minerva
}

# prints our constants
function print_constants
{
    echo "printing constants:"
    echo "BUILD                         $BUILD"
    echo "BUILDDIR                      $BUILDDIR"
    echo "exported SDK                  $SDK"
    echo "exported CALADAN3_TOOLS_PATH  $CALADAN3_TOOLS_PATH"
    echo "UCODE_PATH                    $UCODE_PATH"
    echo "REGRESSION_PATH               $REGRESSION_PATH"
    echo "CFG_PATH                  $CFG_PATH"
    echo "CVSROOT_ATHENA                $CVSROOT_ATHENA"
    echo "CVSROOT_MINERVA               $CVSROOT_MINERVA"
}

#logs into athena
function login_athena
{
    echo "logging into athena"
    run_cmd "cvs -d $CVSROOT_ATHENA login"
}

#logs into minerva
function login_minerva
{
    echo "logging into minerva"
    run_cmd "cvs -d $CVSROOT_MINERVA login"
}

# checks out sdk
# optional function argument is tag
function get_sdk
{
    echo "checking out sdk"
    run_cmd "cd $BUILDDIR"

    if [ -n "$1" ]; then
	run_cmd "cvs -d $CVSROOT_MINERVA co -r $1 sdk"
    else
	run_cmd "cvs -d $CVSROOT_MINERVA co sdk"
    fi
}

# checks out caladan_ucode portion of sdk
# optional function argument is tag
function get_caladan_ucode
{
    echo "checking out caladan_ucode"
    run_cmd "cd $BUILDDIR"

    if [ -n "$1" ]; then
	run_cmd "cvs -d $CVSROOT_MINERVA co -r $1 sdk/caladan_ucode"
    else
	run_cmd "cvs -d $CVSROOT_MINERVA co sdk/caladan_ucode"
    fi
}

# checks out java_tools
# optional function argument is tag
function get_java_tools
{
    echo "checking out java_tools"
    run_cmd "cd $BUILDDIR"

    if [ -n "$1" ]; then
	run_cmd "cvs -d $CVSROOT_ATHENA co -r $1 caladan_tools/java_tools"
    else
	run_cmd "cvs -d $CVSROOT_ATHENA co caladan_tools/java_tools"
    fi
}

# checks out java_toolsPkgC3
# optional function argument is tag
function get_pkg_c3
{
    echo "checking out java_tools"
    run_cmd "cd $BUILDDIR"

    if [ -n "$1" ]; then
	run_cmd "cvs -d $CVSROOT_ATHENA co -r $1 caladan_tools/PkgC3"
    else
	run_cmd "cvs -d $CVSROOT_ATHENA co caladan_tools/PkgC3"
    fi
}


# checks out lib portion of java_tools
# optional function argument is tag
function get_java_tools_lib
{
    echo "checking out java_tools lib"
    run_cmd "cd $BUILDDIR"

    if [ -n "$1" ]; then
	run_cmd "cvs -d $CVSROOT_ATHENA co -r $1 caladan_tools/java_tools/lib"
    else
	run_cmd "cvs -d $CVSROOT_ATHENA co caladan_tools/java_tools/lib"
    fi
}

# checks out tests cfg portion of java_tools
# optional function argument is tag
function get_java_tools_cfg
{
    echo "checking out java_tools cfg"
    run_cmd "cd $BUILDDIR"

    if [ -n "$1" ]; then
	run_cmd "cvs -d $CVSROOT_ATHENA co -r $1 \
        caladan_tools/java_tools/src/com/broadcom/mde/c3simenv/config"
    else
	run_cmd "cvs -d $CVSROOT_ATHENA co \
        caladan_tools/java_tools/src/com/broadcom/mde/c3simenv/config"
    fi
}

# boulds ucode
function build_ucode
{
    echo "build ucode"
    run_cmd "cd $SDK/caladan_ucode/g3p1/src" 
    run_cmd "make clean" 
    run_cmd "make"
}

# copy generated from ucode files into regression area of java_tools
function copy_gen_to_regression
{
    echo "copy gen to regression"
    run_cmd "cd $REGRESSION_PATH"
    run_cmd "chmod +w *.lrp"
    run_cmd "cp -f $UCODE_PATH/*.lrp ."
    run_cmd "cp -f $UCODE_PATH/*.xml ."
    run_cmd "cp -f $UCODE_PATH/*.cfg3 ."
}

# copy ppe config and constants files from caladan_tools area to the ucode build area in the sdk
function copy_reg_ppe_conf_to_sdk_src
{
    echo "copy constants and ppe config lrp files from caladan_tools to the sdk...src area"
    run_cmd "cd $UCODE_PATH"
    run_cmd "chmod +w g3p1_ppe_cfg.lrp"
    run_cmd "cp -f $REGRESSION_PATH/g3p1_ppe_cfg.lrp ."
    run_cmd "chmod +w g3p1_cfg_consts.lrp"
    run_cmd "cp -f $REGRESSION_PATH/g3p1_cfg_consts.lrp ."
}


# copy config files to the regression area of java_tools
function copy_cfg_to_regression
{
    echo "copy cfg to regression"
    run_cmd "cd $REGRESSION_PATH"
    run_cmd "chmod +w *.xml"

#new
    run_cmd "cp -f $CFG_PATH/G3Ocm.xml         ."  
    run_cmd "cp -f $CFG_PATH/G3Ppe.xml         ."  
    run_cmd "cp -f $CFG_PATH/G3Cmu.xml         ."  
    run_cmd "cp -f $CFG_PATH/G3Cop.xml         ."  

#old
    run_cmd "cp -f $CFG_PATH/G3Tmu.xml         ." #not yet auto generated (but close) 
    run_cmd "cp -f $CFG_PATH/C3Hdr.xml         ." #C3 hand coded file
    run_cmd "cp -f $CFG_PATH/G3Hdr.xml         ." #G3 hand coded file
    run_cmd "cp -f $CFG_PATH/G3Lrp.xml         ." #G3 hand coded file
    run_cmd "cp -f $CFG_PATH/G3Replication.xml ." #G3 hand coded file
    run_cmd "cp -f $CFG_PATH/UcTst.xml         ." #G3 hand coded file

}

# update regression area of java_tools
function update_regression
{
    echo "update regression"
    run_cmd "cd $REGRESSION_PATH"
    run_cmd "cvs update"
}

# commit regression area of java_tools
function commit_regression
{
    echo "commit regression"
    run_cmd "cd $REGRESSION_PATH"
    run_cmd "touch *"
    run_cmd "cvs commit -m 'latest'"
}

function help_msg
{
    echo "help message"
    echo "script for synchronization of sdk/caladan_ucode and java_tools/regresison"
    echo "run: $0 [mode [build]]"
    echo "arguments are optional"
    echo "mode is mode of operation, default value of mode is 0"
    echo "build is portion of name of the sub directory created and used for commands"
    echo "directory created and used is sdk.build"
    echo "script should be running from parent of this sub directory"
    echo "default name for build is latest"
    echo "if no build command given, directory sdk.latest created and used"
    echo "modes of opetation:"
    echo " 0 prints help"
    echo " 1 simple synchronization: repositories should be logged in,"
    echo "   sdk and java_tools should be checked out"
    echo "   command will check out only ucode subdirectory from sdk"
    echo "   end config portion of caladan_tools"
    echo "   build ucode, copy and commit necessary files into caladan_tools"
    echo " 2 full check out and synchronizaiton (cvs should have logged in)"
    echo " 3 cvs login (will ask password), full check out and synchronizaiton"
    echo " 4 just build and commit"
    echo " 5 check out PkgC3"
    echo " 6 just copy files"
    echo " 7 update tools lib, ucode and build ucode"
    echo " 8 build ucode"
    echo " 9 get tools jars"
    echo "10 copy ppe cfg files from tools regr to sdk...src"
    echo "11 update tools lib, ucode, copy ppe config files from tools...regr to sdk...src and build ucode"
}

#------------------------------------------------------------------
# process command line
if [ -n "$1" ]; then MODE=$1
else MODE=0
fi

if [ -n "$2" ]; then BUILD=$2
else BUILD=latest
fi

RUN_CMD=1

##------------------------------------------------------------------

echo "MODE: $MODE"

case "$MODE" in

#empty value of mode processing is redundant of cause, just to be safe...
"") 	# print help message
	help_msg
	;;

"0") 	# print help message
	help_msg
	;;

"1") 	# simple synchronize
	set_constants
	get_caladan_ucode
	get_java_tools_lib
	get_java_tools_cfg
	build_ucode
	update_regression
	copy_gen_to_regression
	copy_cfg_to_regression
	commit_regression
	;;
"2")    # everything but login
	set_constants
	get_sdk
	get_caladan_ucode
	get_java_tools
	get_java_tools_lib
	get_java_tools_cfg
	build_ucode
	update_regression
	copy_gen_to_regression
	copy_cfg_to_regression
	commit_regression
	;;
"3")    # everything including login
	set_constants
	login_athena
	login_minerva
	get_sdk
	get_caladan_ucode
	get_java_tools
	get_java_tools_lib
	get_java_tools_cfg
	build_ucode
	update_regression
	copy_gen_to_regression
	copy_cfg_to_regression
	commit_regression
	;;
"4")    # just build and commit
	build_ucode
	update_regression
	copy_gen_to_regression
	copy_cfg_to_regression
	commit_regression
	;;
"5")    # get PkgC3
	set_constants
	get_pkg_c3
	;;
"6") 	# just copy files
	set_constants
	update_regression
	copy_gen_to_regression
	copy_cfg_to_regression
	commit_regression
	;;
"7") 	# update tools lib, ucode and build ucode
	set_constants
	get_caladan_ucode
	get_java_tools_lib
	build_ucode
	;;

"8") 	# build ucode
	set_constants
	build_ucode
	;;

"9") 	# get tools jars
	set_constants
	get_java_tools_lib
	;;


"10") 	# copy ppe cfg files from tools regr to sdk...src
	set_constants
	copy_reg_ppe_conf_to_sdk_src
	;;


"11") 	# update tools lib, ucode, copy ppe config files from tools...regr to sdk...src and build ucode
	set_constants
	get_caladan_ucode
	get_java_tools_lib
	#copy_reg_ppe_conf_to_sdk_src
	build_ucode
	;;

"99")
# runs all functions to test them
	#DO_NOT_RUN_CMD=1 # we do not actualy run shell commands, just print them out
	set_constants
	print_constants
	#login_athena
	#login_minerva
	#get_sdk
	#get_sdk "TAG"
	#get_caladan_ucode
	#get_caladan_ucode "TAG"
	#get_java_tools
	#get_java_tools "TAG"
	#get_java_tools_lib
	#get_java_tools_lib "TAG"
	#get_java_tools_cfg
	#get_java_tools_cfg "TAG"
	#build_ucode
	#copy_gen_to_regression
	#copy_cfg_to_regression
	#update_regression
	#commit_regression
	;;
esac

# exit the script
exit


############################################################################
# end of file
