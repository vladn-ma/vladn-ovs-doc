#! /usr/local/bin/bash

#//
#// build sdk
#//

build=$1
#-- export build="0128"

#// set CVSROOT to SJ
export CVSROOT=":pserver:vladn@cvsps-sj1-1.sj.broadcom.com:2401/projects/ntsw-sw/swcvs/athena"
mkdir -p views.$build

// check out sdk, and set SDK variable
cd views.$build; \
cvs co sdk; \
cd sdk;
export SDK=`pwd`
echo SDK=$SDK

#// check out fe2k-ucode
cd $SDK/src/soc/sbx; cvs -d :local:/projects/car_cvsdb co fe2k-ucode
#// cd $SDK/src/soc/sbx/fe2k-ucode/g2p3/src; make clean ; make
cd $SDK/make; chmod +w Make.local.template
cd $SDK/src/soc/sbx/fe2k-ucode/g2p3/sdkfiles; make

# cd $SDK/src/soc/sbx/fe2k-ucode/g2p3/src/g2p3_ppe; \
# sbG2FePpRuleEncode.csv2txt.perl; sbG2FePpRuleEncode.sh

cp -f $SDK/rc/config-sbx-fe2kxt.bcm $SDK/systems/linux/user/gto-2_6/config.bcm

#// clean and some magic rm
rm -frR $SDK/build/linux-metrocore-2_6;
rm -frR $SDK/build/unix-user;
rm $SDK/build/unix-user//metrocore-2_6/src/appl/tcl8.3.3/broadcom/{sdk_*,soc_gen.i};
cd $SDK/systems/linux/user/metrocore-2_6; make clean

#// clean and some magic rm
rm -frR $SDK/build/linux-gto-2_6;
rm -frR $SDK/build/unix-user;
rm $SDK/build/unix-user/gto-2_6/src/appl/tcl8.3.3/broadcom/{sdk_*,soc_gen.i};
cd $SDK/systems/linux/user/gto-2_6; make clean

#// set GNU Makeversion to 3.81
export PATH=/tools/bin:$PATH

#// undef CROSS_COMPILE variable
export CROSS_COMPILE=
#// set TCL_LIBRARY variable
export TCL_LIBRARY="$SDK/src/appl/tcl8.3.3/library"
#// set SBX_CHIPS variable
export SBX_CHIPS=1

#// goto gto-2_6, and do "make"
#cd $SDK/systems/linux/user/gto-2_6; /tools/bin/bsub -q mht-car -R "rhel40" -Is -J make /tools/sbx/common/lsf_job_starter make

#// goto metrocore-2_6, and do "make"
#cd $SDK/systems/linux/user/metrocore-2_6; /tools/bin/bsub -q mht-car -R "rhel40" -Is -J make /tools/sbx/common/lsf_job_starter make

#// bcmsim
#-- cd $SDK/systems/sim/bcmsim
#-- make sbxlcm #//local build


#Build the SDK for BCMSIM environment: 
# 
#NOTE: Make sure you are using a 32bit machine when building the SDK. BCM SDK in simulation mode is supported only on 32bit machines. More specifically, 64-bit machines are only supported if 32-bit binaries are created and run. 
# 
#          cvs co sdk 
#          cd sdk 
#          setenv SDK `pwd` 
#          cd make 
#          cp Make.local.template Make.local 
#          (edit Make.local and add: "SBX_CHIPS=1") 
#          cd $SDK/systems/sim/bcmsim 
#          setenv BCMSIM_ROOT /projects/ntsw-sw/dsg/bcmsim/framework_v1.0/ 
#          make sbxlcm 

#//  Building LCM library for BCMSIM environment:

#// NOTE: This step is not required if you just want to use currently posted LcModel? library for BCMSIM environment. There is a pre-built LCM library thats posted at /projects/ntsw-sw/dsg/bcmsim/framework_v1.0/lib/libbcmsbxlcm.a that is automatically linked in by setting BCMSIM_ROOT to /projects/ntsw-sw/dsg/bcmsim/framework_v1.0/. However, if you are interested in building LCM library yourself, follow these instructions:I

#         cd lcmodel
#         cvs co system_sim
#         cd system_sim/
#         ./release.pl co lcmodel_dist@latest
#         setenv SDK "path to sdk"
#         cd lcmodel
#         make bcmsim_lcmodel_dist FAST=1                  


#// The last step creates libbcmsbxlcm_c2.a (./bcmsim/caladan2/libbcmsbxlcm_c2.a). To use this library, before doing "make sbxlcm" in $SDK/systems/sim/bcmsim directory, do "setenv BCMSBXLCM_LIB "full path to lib"/libbcmsbxlcm.a". This will override the default $BCMSIM_ROOT/lib/libbcmsbxlcm.a.  NOTE: This build supports both Caladan1 and Caladan2. To select caladan2, add lcmtopology=c2 to the ARGS list in cdf file. The default value is Caladan. Remember to set BCMSBXLCM_LIB to this library before building the sdk bcmsim target.


